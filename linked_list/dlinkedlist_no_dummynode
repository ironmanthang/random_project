#include <iostream>
#include <sstream>
#include <string>
#include <stdexcept>
using namespace std;
//no dummy node
template <class T>
class DLinkedList {
public:
    class Node; // Forward declaration
protected:
    Node* head;
    Node* tail;
    int count;
public:
    DLinkedList();
    ~DLinkedList();
    void add(const T &e); // Add to the end
    void add(int index, const T &e); // Add at a specific index
    int size(); // Return the size of the list
    string toString(); // String representation of the list
    bool    empty();
    T       get(int index);
    void    set(int index, const T &e);
    int     indexOf(const T &item);
    bool    contains(const T &item);
public:
    class Node {
    private:
        T data;
        Node* next;
        Node* previous;
        friend class DLinkedList<T>;

    public:
        Node()
        {
            this->previous = NULL;
            this->next = NULL;
        }
        Node(const T& data) : data(data), next(nullptr), previous(nullptr) {}
    };
};

template <class T>
DLinkedList<T>::DLinkedList() : head(nullptr), tail(nullptr), count(0) {}

template <class T>
DLinkedList<T>::~DLinkedList() {
    // Destructor to free all nodes
    Node* current = head;
    while (current != nullptr) {
        Node* next = current->next;
        delete current;
        current = next;
    }
}

template <class T>
void DLinkedList<T>::add(const T& e) {
    Node* newNode = new Node(e);
    if (count == 0) {  // Empty list case
        head = tail = newNode;
    } else {  // Non-empty list
        tail->next = newNode;
        newNode->previous = tail;
        tail = newNode;
    }
    count++;
}

template <class T>
void DLinkedList<T>::add(int index, const T& e) {
    if (index < 0 || index > count) {
        throw out_of_range("Index is out of range.");
    }

    Node* newNode = new Node(e);

    if (index == 0) {  // Inserting at the head
        if (count == 0) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head->previous = newNode;
            head = newNode;
        }
    } else if (index == count) {  // Inserting at the tail (equivalent to add(e))
        tail->next = newNode;
        newNode->previous = tail;
        tail = newNode;
    } else {  // Inserting somewhere in the middle
        Node* temp = head;
        for (int i = 0; i < index; i++) {
            temp = temp->next;
        }
        newNode->next = temp;
        newNode->previous = temp->previous;
        temp->previous->next = newNode;
        temp->previous = newNode;
    }

    count++;
}

template <class T>
int DLinkedList<T>::size() {
    return count;
}

template <class T>
string DLinkedList<T>::toString() {
    ostringstream oss;
    oss << "[";
    Node* temp = head;
    while (temp != nullptr) {
        oss << temp->data;
        temp = temp->next;
        if (temp != nullptr) {
            oss << ",";
        }
    }
    oss << "]";
    return oss.str();
}
template <class T>
T DLinkedList<T>::get(int index) {
    if (index < 0 || index >= count) {
        throw out_of_range("Index is out of range.");
    }
    Node* temp=head;
    for(int i=0;i<index;i++){
        temp=temp->next;
    }
    return temp->data;
}

template <class T>
void DLinkedList<T>::set(int index, const T& e) {
    if (index < 0 || index >= count) {
        throw out_of_range("Index is out of range.");
    }
    Node* temp=head;
    for(int i=0;i<index;i++){
        temp=temp->next;
    }temp->data=e;
}

template <class T>
bool DLinkedList<T>::empty() {
    return count==0;
}

template <class T>
int DLinkedList<T>::indexOf(const T& item) {
    int check=0;
    Node* temp=head;
    while(temp!=nullptr){
        if(temp->data==item){
        return check;
        }
        temp=temp->next;
        check++;
    }
    return -1;
}

template <class T>
bool DLinkedList<T>::contains(const T& item) {
    return indexOf(item)!=-1;
}
int main() {
    DLinkedList<int> list;
int size = 10;
int value[] = {2,5,6,3,67,332,43,1,0,9};
for(int idx=0; idx < size; idx++){
  list.add(idx);
}
for(int idx=0; idx < size; idx++){
  list.set(idx, value[idx]);
}
cout << list.toString();
    return 0;
}
///////////////////////////
#include <iostream>
#include <sstream>
#include <string>
#include <stdexcept>
using namespace std;
template <class T>
class ArrayList {
protected:
    T* data;        // dynamic array to store the list's items
    int capacity;   // size of the dynamic array
    int count;      // number of items stored in the array
public:
    ArrayList(){capacity = 5; count = 0; data = new T[5];}
    ~ArrayList(){ delete[] data; }
    void    add(T e);
    void    add(int index, T e);
    int     size();
    bool    empty();
    void    clear();
    T       get(int index);
    void    set(int index, T e);
    int     indexOf(T item);
    bool    contains(T item);
    T       removeAt(int index);
    bool    removeItem(T item);
    void    ensureCapacity(int index);
    string toString();
};
template <class T>
void ArrayList<T>::ensureCapacity(int cap) {
    if (cap > capacity) {
        int new_capacity = capacity * 1.5; // Increase capacity by 1.5 times
        if (new_capacity < cap) {
            new_capacity = cap; // Ensure new capacity is at least as large as cap
        }
        T* new_data = new T[new_capacity];
        
        // Copy the old data to the new array
        for (int i = 0; i < count; ++i) {
            new_data[i] = data[i];
        }
        
        delete[] data;  // Free the old array
        data = new_data; // Assign the new array to data
        capacity = new_capacity; // Update capacity
    }
}

template <class T>
void ArrayList<T>::add(T e) {
    ensureCapacity(count + 1); // Ensure there's enough room for the new element
    data[count] = e;           // Insert the element at the end
    count++;                   // Increase the element count
}

template <class T>
void ArrayList<T>::add(int index, T e) {
    if (index < 0 || index > count) {
        throw std::out_of_range("The input index is out of range!");
    }
    
    ensureCapacity(count + 1); // Ensure there's enough room for the new element
    
    // Shift elements to the right to make room for the new element
    for (int i = count; i > index; --i) {
        data[i] = data[i - 1];
    }
    
    data[index] = e; // Insert the new element at the specified index
    count++;         // Increase the element count
}

template <class T>
int ArrayList<T>::size() {
    return count; // Return the number of elements in the list
}
template<class T>
T ArrayList<T>::removeAt(int index) {
    if (index < 0 || index >= count) {
        throw std::out_of_range("index is out of range");
    }

    T removedItem = data[index];  // Store the item to be removed

    // Shift elements to the left to fill the gap
    for (int i = index; i < count - 1; ++i) {
        data[i] = data[i + 1];
    }

    count--;  // Decrease the count of elements

    return removedItem;  // Return the removed item
}

template<class T>
bool ArrayList<T>::removeItem(T item) {
    // Iterate through the array to find the first occurrence of the item
    for (int i = 0; i < count; ++i) {
        if (data[i] == item) {
            // Remove the item at the found index
            removeAt(i);
            return true;  // Return true indicating successful removal
        }
    }
    return false;  // Return false if the item was not found
}

template<class T>
void ArrayList<T>::clear() {
    if (data != nullptr) {
        delete[] data;  // Delete the existing dynamic array
    }
    capacity = 5;       // Reset capacity to 5
    count = 0;          // Reset count to 0
    data = new T[capacity];  // Reinitialize the array
}

template<class T>
string ArrayList<T>::toString() {
    ostringstream oss;
    oss << "[";
    for (int i = 0; i < count; ++i) {
        oss << data[i];
        if (i < count - 1) {
            oss << ", ";
        }
    }
    oss << "]";
    return oss.str();
}
int main() {ArrayList<int> arr;
int size = 20;

for(int index = 0; index < size; index++){
    arr.add(0, index);
}

cout << arr.toString() << '\n';
cout << arr.size() << '\n';
arr.ensureCapacity(5);
    return 0;
}
